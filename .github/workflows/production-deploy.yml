name: Production Deployment Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '20'
  CACHE_KEY_PREFIX: 'v1'

jobs:
  # Quality Assurance Phase
  quality-assurance:
    name: 'QA: Code Quality & Security'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Code Linting
        run: npm run lint

      - name: TypeScript Type Check
        run: npx tsc --noEmit

      - name: Security Audit
        run: |
          npm audit --audit-level=high
          npx audit-ci --config .audit-ci.json || true

      - name: Check for Secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Testing Phase
  testing:
    name: 'Testing: Unit & Integration'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quality-assurance
    
    strategy:
      matrix:
        test-group: ['unit', 'integration', 'e2e']
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run Unit Tests
        if: matrix.test-group == 'unit'
        run: |
          npm run test:coverage
          echo "COVERAGE=$(npm run test:coverage 2>&1 | grep -o 'All files.*[0-9]*\.[0-9]*' | grep -o '[0-9]*\.[0-9]*')" >> $GITHUB_ENV

      - name: Coverage Validation
        if: matrix.test-group == 'unit'
        run: |
          if (( $(echo "$COVERAGE < 95" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below 95% requirement"
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets requirement"
          fi

      - name: Run Integration Tests
        if: matrix.test-group == 'integration'
        run: npm run test -- --testPathPattern=integration

      - name: Install Playwright
        if: matrix.test-group == 'e2e'
        run: npx playwright install --with-deps chromium

      - name: Run E2E Tests
        if: matrix.test-group == 'e2e'
        run: |
          npm run build
          npm start &
          npx wait-on http://localhost:3000
          npx playwright test tests/e2e/
        env:
          TEST_URL: http://localhost:3000

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-group }}
          path: |
            coverage/
            test-results/
            playwright-report/

  # Build & Performance Testing
  build-and-performance:
    name: 'Build & Performance Validation'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-assurance
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build Application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Analyze Bundle Size
        run: |
          ANALYZE=true npm run build
          echo "Bundle analysis complete"

      - name: Performance Budget Check
        run: npm run performance:budget

      - name: Start Application
        run: |
          npm start &
          npx wait-on http://localhost:3000

      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            out/
            lighthouse-results/

  # Security Testing
  security-testing:
    name: 'Security: Vulnerability & Penetration Testing'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality-assurance, build-and-performance]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build and Start Application
        run: |
          npm run build
          npm start &
          npx wait-on http://localhost:3000

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Security Headers Check
        run: |
          curl -I http://localhost:3000 | grep -E "(X-Frame-Options|X-Content-Type-Options|X-XSS-Protection|Content-Security-Policy)"
          if [ $? -ne 0 ]; then
            echo "❌ Missing security headers"
            exit 1
          fi

      - name: SSL/TLS Configuration Test
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Testing SSL configuration..."
          # Add SSL tests for production domain

  # Production Validation
  production-validation:
    name: 'Production Readiness Validation'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [testing, build-and-performance, security-testing]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run Production Validator
        run: node scripts/production-validator.js

      - name: Upload Validation Report
        uses: actions/upload-artifact@v4
        with:
          name: production-validation-report
          path: production-validation-report.json

  # Staging Deployment
  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: production-validation
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build for Export
        run: |
          BUILD_MODE=export npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.STAGING_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.STAGING_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.STAGING_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.STAGING_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.STAGING_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.STAGING_FIREBASE_APP_ID }}

      - name: Deploy to Firebase Hosting (Staging)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}'
          channelId: staging
          projectId: ${{ secrets.STAGING_FIREBASE_PROJECT_ID }}

      - name: Run Staging Smoke Tests
        run: |
          sleep 30
          curl -f https://staging-${{ secrets.STAGING_FIREBASE_PROJECT_ID }}.web.app/ || exit 1
          echo "✅ Staging deployment successful"

  # Production Deployment
  deploy-production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' && github.event.inputs.environment == 'production'
    environment: production
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build for Production
        run: |
          BUILD_MODE=export npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.PROD_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.PROD_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.PROD_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.PROD_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.PROD_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.PROD_FIREBASE_APP_ID }}

      - name: Pre-deployment Health Check
        run: |
          npm start &
          npx wait-on http://localhost:3000
          curl -f http://localhost:3000/health || echo "Health check endpoint not available"

      - name: Deploy to Firebase Hosting (Production)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_PROD }}'
          channelId: live
          projectId: ${{ secrets.PROD_FIREBASE_PROJECT_ID }}

      - name: Post-deployment Verification
        run: |
          sleep 60
          # Comprehensive production health check
          PROD_URL="https://${{ secrets.PROD_FIREBASE_PROJECT_ID }}.web.app"
          
          # Check main page
          curl -f $PROD_URL/ || exit 1
          
          # Check security headers
          curl -I $PROD_URL/ | grep "X-Frame-Options" || exit 1
          curl -I $PROD_URL/ | grep "Content-Security-Policy" || exit 1
          
          # Check performance
          npx lighthouse $PROD_URL --chrome-flags="--headless" --output=json --output-path=./prod-lighthouse.json
          
          echo "✅ Production deployment verified successfully"

      - name: Notify Deployment Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "🚀 DressUp AI successfully deployed to production!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Deployment Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "❌ DressUp AI production deployment failed!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback Support
  rollback:
    name: 'Emergency Rollback'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event.inputs.environment == 'rollback'
    environment: production
    
    steps:
      - name: Rollback to Previous Version
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_PROD }}'
          channelId: live
          projectId: ${{ secrets.PROD_FIREBASE_PROJECT_ID }}
          # Add rollback logic here

      - name: Notify Rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "🔄 Emergency rollback completed for DressUp AI",
              color: "warning"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}