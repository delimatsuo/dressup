'use client';

import React, { useState, useEffect } from 'react';
// import { PhotoUploadInterface } from '../components/PhotoUploadInterface';
// import GarmentGallery, { Garment } from '../components/GarmentGallery';
// import ResultsDisplay, { Result } from '../components/ResultsDisplay';
// import FeedbackSection from '../components/FeedbackSection';
// import { WelcomeConsentModal } from '../components/WelcomeConsentModal';
// import { useConsent } from '../hooks/useConsent';
// import { useKeyboardDetection } from '../hooks/useFocusTrap';
// import { 
  
  

interface PhotoData {
  userPhotos: {
    front: string;
    side: string;
    back: string;
  };
  garmentPhotos: {
    front: string;
    side: string;
    back: string;
  };
}

export default function HomePage() {
  const { hasConsented, isLoading: consentLoading, shouldShowConsentModal, grantConsent } = useConsent();
  
  // Initialize keyboard detection at the application level
  useKeyboardDetection();
  
  const [sessionId, setSessionId] = useState<string>('');
  const [savedUserPhotos, setSavedUserPhotos] = useState<PhotoData['userPhotos'] | null>(null);
  const [savedGarmentPhotos, setSavedGarmentPhotos] = useState<PhotoData['garmentPhotos'] | null>(null);
  const [processing, setProcessing] = useState(false);
  const [result, setResult] = useState<any | null>(null); // Changed Result to any
  const [error, setError] = useState<string | null>(null);
  const [showResults, setShowResults] = useState(false);

  // Initialize session and Firebase
  useEffect(() => {
    // Skip during SSR/build time
    if (typeof window === 'undefined') {
      return;
    }

    

    // Generate session ID
    const newSessionId = `session-${Date.now()}-${Math.random().toString(36).substring(7)}`;
    setSessionId(newSessionId);
    
    // Store in sessionStorage for tracking
    window.sessionStorage.setItem('sessionId', newSessionId);
  }, []);

  const handleGenerateOutfit = async (data: PhotoData) => {
    if (!data) return;

    setSavedUserPhotos(data.userPhotos); // Save user photos for "Try Another" functionality
    setSavedGarmentPhotos(data.garmentPhotos); // Save garment photos for regeneration
    setProcessing(true);
    setError(null);
    setShowResults(true);

    try {
      // Use the new multi-photo processing function
      const response = await fetch('/api/try-on', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userPhotos: data.userPhotos,
          garmentPhotos: data.garmentPhotos,
          sessionId,
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const processedResult = await response.json();

      const newResult: any = {
        id: `result-${Date.now()}`,
        poses: processedResult.poses,
        garmentName: 'Your Custom Outfit',
        processingTime: processedResult.processingTime,
        timestamp: new Date().toISOString(),
        description: processedResult.description,
      };

      setResult(newResult);
    } catch (err: unknown) {
      setError(err instanceof Error ? err.message : 'Failed to process outfit images');
      setShowResults(false); // Go back to upload on error
    } finally {
      setProcessing(false);
    }
  };

  const handleFeedbackSubmit = async (feedback: { 
    rating: number; 
    comment: string; 
    realismRating: number; 
    helpfulnessRating: number; 
  }) => {
    try {
      const response = await fetch('/api/feedback', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          rating: feedback.rating,
          comment: feedback.comment,
          realismRating: feedback.realismRating,
          helpfulnessRating: feedback.helpfulnessRating,
          sessionId,
          resultId: result?.id || '',
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return true;
    } catch (err) {
      console.error('Failed to submit feedback:', err);
      return false;
    }
  };

  const handleTryAnother = () => {
    setResult(null);
    setError(null);
    setShowResults(false);
  };

  const handleStartOver = () => {
    setResult(null);
    setSavedUserPhotos(null);
    setSavedGarmentPhotos(null);
    setError(null);
    setShowResults(false);
  };

  const handleRegenerateWithInstructions = async (instructions: string) => {
    if (!savedUserPhotos || !savedGarmentPhotos) {
      setError('Missing photo data for regeneration');
      return;
    }

    setProcessing(true);
    setError(null);

    try {
      const response = await fetch('/api/try-on', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userPhotos: savedUserPhotos,
          garmentPhotos: savedGarmentPhotos,
          sessionId,
          instructions,
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const processedResult = await response.json();

      const newResult: any = {
        id: `result-${Date.now()}`,
        poses: processedResult.poses,
        garmentName: 'Your Custom Outfit',
        processingTime: processedResult.processingTime,
        timestamp: new Date().toISOString(),
        description: processedResult.description,
      };

      setResult(newResult);
    } catch (err: unknown) {
      setError(err instanceof Error ? err.message : 'Failed to regenerate outfit with instructions');
    } finally {
      setProcessing(false);
    }
  };

  const handleConsent = () => {
    // grantConsent(); // Commented out useConsent hook
  };

  // Show loading spinner while checking consent
  // if (consentLoading) { // Commented out useConsent hook
  //   return (
  //     <div className="min-h-screen flex items-center justify-center">
  //       <div className="text-center">
  //         <div 
  //           className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4" 
  //           role="status" 
  //           aria-label="Loading"
  //         ></div>
  //         <p className="text-gray-700">Loading...</p>
  //       </div>
  //     </div>
  //   );
  // }

  // Show consent modal if user hasn't consented
  // if (!hasConsented && typeof window !== 'undefined') { // Commented out useConsent hook
  //   return (
  //     <>
  //       <WelcomeConsentModal
  //         isOpen={shouldShowConsentModal}
  //         onConsent={handleConsent}
  //         onClose={() => {
  //           // For now, just keep the modal open since consent is required
  //           // In a production app, you might redirect or show a different message
  //         }}
  //       />
  //       <div className="min-h-screen flex items-center justify-center bg-gray-100 px-4">
  //         <div className="text-center">
  //           <h1 className="text-4xl sm:text-5xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-4">
  //             DressUp AI
  //           </h1>
  //           <p className="text-lg text-gray-800 font-medium">Please review and accept our terms to continue.</p>
  //         </div>
  //       </div>
  //     </>
  //   );
  // }

  return (
    <div className="mobile-container py-4 sm:py-8 max-w-7xl">
      {/* Skip to main content link for keyboard navigation */}
      <a 
        href="#main-content" 
        className="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-blue-600 text-white px-4 py-2 rounded z-50 focus:outline-none focus:ring-2 focus:ring-blue-300"
      >
        Skip to main content
      </a>
      
      <header className="text-center mb-6 sm:mb-12" role="banner">
        <h1 className="text-5xl sm:text-6xl font-bold mb-2 sm:mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              DressUp AI
            </h1>
            <p className="text-lg sm:text-xl text-gray-800 font-medium">
              Transform your look with AI-powered virtual outfit try-on
            </p>
          </header>

          <section className="mb-6 sm:mb-8 bg-gradient-to-br from-blue-50 to-purple-50 rounded-xl p-6 sm:p-8 shadow-lg border border-blue-100" aria-labelledby="how-it-works">
            <h2 id="how-it-works" className="text-2xl sm:text-3xl font-bold text-gray-900 mb-6">How It Works</h2>
            <ol className="grid grid-cols-1 sm:grid-cols-3 gap-4" role="list">
              <li className="flex items-start">
                <span className="flex-shrink-0 w-10 h-10 bg-gradient-to-br from-blue-500 to-blue-600 text-white rounded-full flex items-center justify-center font-bold mr-3 shadow-md" aria-hidden="true">
                  1
                </span>
                <div>
                  <h3 className="font-bold text-lg text-gray-900">Upload Your Photos</h3>
                  <p className="text-sm text-gray-700 mt-1">Upload photos of yourself and the garment (front, side views)</p>
                </div>
              </li>
              <li className="flex items-start">
                <span className="flex-shrink-0 w-10 h-10 bg-gradient-to-br from-purple-500 to-purple-600 text-white rounded-full flex items-center justify-center font-bold mr-3 shadow-md" aria-hidden="true">
                  2
                </span>
                <div>
                  <h3 className="font-bold text-lg text-gray-900">Generate Poses</h3>
                  <p className="text-sm text-gray-700 mt-1">Our AI creates multiple outfit poses for you</p>
                </div>
              </li>
              <li className="flex items-start">
                <span className="flex-shrink-0 w-10 h-10 bg-gradient-to-br from-green-500 to-green-600 text-white rounded-full flex items-center justify-center font-bold mr-3 shadow-md" aria-hidden="true">
                  3
                </span>
                <div>
                  <h3 className="font-bold text-lg text-gray-900">See Your Results</h3>
                  <p className="text-sm text-gray-700 mt-1">View realistic outfit visualizations</p>
                </div>
              </li>
            </ol>
          </section>

          {error && !showResults && (
            <div className="mb-6 p-4 bg-red-50 border border-red-300 rounded-lg text-red-800" role="alert" aria-live="assertive">
              <h2 className="sr-only">Error</h2>
              <strong className="font-medium">Error:</strong> {error}
            </div>
          )}

          <main id="main-content" role="main">
            {showResults ? (
              <section aria-labelledby="results-section">
                <h2 id="results-section" className="sr-only">Generated Results</h2>
                <ResultsDisplay
                  result={result || undefined}
                  loading={processing}
                  error={error || undefined}
                  showComparison={false}
                  onTryAnother={handleTryAnother}
                  onStartOver={handleStartOver}
                  onRegenerateWithInstructions={handleRegenerateWithInstructions}
                  onDownload={async (result) => {
                      for (const pose of result.poses) {
                        try {
                          const response = await fetch(pose.processedImageUrl);
                          const blob = await response.blob();
                          const url = window.URL.createObjectURL(blob);
                          const a = document.createElement('a');
                          a.style.display = 'none';
                          a.href = url;
                          a.download = `${pose.name.toLowerCase().replace(/ /g, '-')}.png`;
                          document.body.appendChild(a);
                          a.click();
                          window.URL.revokeObjectURL(url);
                          a.remove();
                        } catch (err) {
                          console.error('Failed to download image:', err);
                          setError('Failed to download one or more images.');
                        }
                      }
                  }}
                />
                {/* Only show feedback section after successful result generation */}
                {result && !processing && (
                  <aside aria-labelledby="feedback-section" className="mt-8">
                    <h2 id="feedback-section" className="sr-only">User Feedback</h2>
                    <FeedbackSection
                      onSubmit={handleFeedbackSubmit}
                      onQuickFeedback={(type) => {
                        console.log('Quick feedback:', type);
                      }}
                    />
                  </aside>
                )}
              </section>
            ) : (
              <section aria-labelledby="upload-section">
                <h2 id="upload-section" className="sr-only">Photo Upload</h2>
                <PhotoUploadInterface 
                  onComplete={handleGenerateOutfit}
                  existingUserPhotos={savedUserPhotos || undefined}
                />
              </section>
            )}
          </main>
        </div>
      );
}